[{"C:\\Users\\KABIK\\Documents\\lummy\\src\\index.js":"1","C:\\Users\\KABIK\\Documents\\lummy\\src\\App.js":"2","C:\\Users\\KABIK\\Documents\\lummy\\src\\reportWebVitals.js":"3","C:\\Users\\KABIK\\Documents\\lummy\\src\\components\\Chat\\Chat.js":"4","C:\\Users\\KABIK\\Documents\\lummy\\src\\components\\Chat\\ListMessages.js":"5","C:\\Users\\KABIK\\Documents\\lummy\\src\\components\\Chat\\Message.js":"6"},{"size":500,"mtime":1607628595984,"results":"7","hashOfConfig":"8"},{"size":212,"mtime":1607720450789,"results":"9","hashOfConfig":"8"},{"size":362,"mtime":1607628595984,"results":"10","hashOfConfig":"8"},{"size":3223,"mtime":1607727508506,"results":"11","hashOfConfig":"8"},{"size":777,"mtime":1607727171365,"results":"12","hashOfConfig":"8"},{"size":389,"mtime":1607726738569,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"18rotlb",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"16"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28"},"C:\\Users\\KABIK\\Documents\\lummy\\src\\index.js",[],["29","30"],"C:\\Users\\KABIK\\Documents\\lummy\\src\\App.js",[],"C:\\Users\\KABIK\\Documents\\lummy\\src\\reportWebVitals.js",[],"C:\\Users\\KABIK\\Documents\\lummy\\src\\components\\Chat\\Chat.js",["31","32","33","34"],"import React, { useState, useRef } from \"react\";\r\nimport ListMessages from \"./ListMessages\";\r\nimport imgSend from '../../images/send.svg';\r\nimport imgClose from '../../images/cerrar.svg';\r\nimport imgChat from '../../images/chat.svg';\r\n\r\nconst Chat = props => {\r\n  const scrollMessages = useRef(null);\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const [sending, setSending] = useState(false);\r\n  const [responses, setResponses] = useState([{text: \"\", isBot: false}]);\r\n  const [currentMessage, setCurrentMessage] = useState(\"\");\r\n\r\n  const handleMessageSubmit = message => {\r\n    const data = {\r\n      message\r\n    };\r\n    const config={\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify(data)\r\n    };\r\n    fetch(\"https://lummy-api.herokuapp.com/talk\", config)\r\n      .then(response => response.json())\r\n      .then(res => {\r\n        const message = res.message;\r\n        const responseData = {\r\n          text: message.fulfillmentText != \"\" ? message.fulfillmentText : \"Lo siento, no entendí. ¿Podrías ser más claro?\",\r\n          isBot: true\r\n        };\r\n          setResponses(responses => [...responses, responseData]);\r\n          executeScroll();\r\n          setSending(false);\r\n\r\n      })\r\n      .catch(error => {\r\n        console.log(\"Error: \", error);\r\n      });\r\n  };\r\n\r\n  const handleMessageChange = event => {\r\n    setCurrentMessage(event.target.value);\r\n  };\r\n\r\n  const executeScroll = () => {\r\n    scrollMessages.current.scrollTop = scrollMessages.current.scrollHeight;\r\n  };\r\n\r\n  const handleSubmit = event => {\r\n    const message = {\r\n      text: currentMessage,\r\n      isBot: false\r\n    };\r\n    if (event.key==\"Enter\" || event.type == \"click\") {\r\n      setSending(true);\r\n      setResponses(responses => [...responses, message]);\r\n      executeScroll();\r\n      handleMessageSubmit(message.text);\r\n      setCurrentMessage(\"\");\r\n    }\r\n  };\r\n\r\n  const toggleClass=() => {\r\n    setIsOpen(!isOpen)\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className=\"floating-chat\" onClick={toggleClass}>\r\n              <img src={imgChat} alt=\"\"/>\r\n      </div>\r\n      <div className={`box-chat ${(isOpen ? \"expand\" : null)}`}>\r\n        \r\n        <div className=\"chat\">\r\n          <div className=\"header\">\r\n            <span className=\"title\">\r\n              Hola, ¿qué necesitas?\r\n            </span>\r\n            <button className=\"btn-close-chat\" onClick={toggleClass}>\r\n              <img src={imgClose} alt=\"\"/>\r\n            </button>\r\n          </div>\r\n              \r\n          <ListMessages messages={responses} scroll={scrollMessages} sending={ sending }/>\r\n                  \r\n          <div className=\"footer\">\r\n            <input type=\"text\"\r\n                      value={currentMessage}\r\n                      onChange={handleMessageChange}\r\n                      onKeyDown={handleSubmit}\r\n                      placeholder=\"Escribe un mensaje...\"\r\n                      className=\"text-box\"\r\n                    />\r\n            <button className=\"send-button\" onClick={handleSubmit}>\r\n              <img src={imgSend}/>\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Chat;","C:\\Users\\KABIK\\Documents\\lummy\\src\\components\\Chat\\ListMessages.js",[],"C:\\Users\\KABIK\\Documents\\lummy\\src\\components\\Chat\\Message.js",["35"],"import React from 'react';\r\n\r\nconst Message=({ message }) => {\r\n  return (\r\n    <>\r\n      { (message&&message.text!=\"\") ? (message?.isBot ? (\r\n        <li className=\"self\">\r\n          { message?.text}\r\n        </li>\r\n      ) : (\r\n          <li className=\"other\">\r\n            { message?.text}\r\n          </li>\r\n        )\r\n      ) : \"\"}\r\n      \r\n    </>\r\n  );\r\n};\r\n\r\nexport default Message;",{"ruleId":"36","replacedBy":"37"},{"ruleId":"38","replacedBy":"39"},{"ruleId":"40","severity":1,"message":"41","line":30,"column":41,"nodeType":"42","messageId":"43","endLine":30,"endColumn":43},{"ruleId":"40","severity":1,"message":"44","line":56,"column":18,"nodeType":"42","messageId":"43","endLine":56,"endColumn":20},{"ruleId":"40","severity":1,"message":"44","line":56,"column":42,"nodeType":"42","messageId":"43","endLine":56,"endColumn":44},{"ruleId":"45","severity":1,"message":"46","line":97,"column":15,"nodeType":"47","endLine":97,"endColumn":35},{"ruleId":"40","severity":1,"message":"41","line":6,"column":31,"nodeType":"42","messageId":"43","endLine":6,"endColumn":33},"no-native-reassign",["48"],"no-negated-in-lhs",["49"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","Expected '===' and instead saw '=='.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]